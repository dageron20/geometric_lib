import unittest

from math import inf


def area(data):
    '''
        Возвращает частное произведения двух чисел с плавающей точкой в десятичной системе счисления и десятичной константы.

            Параметры:
                data (str) : массив входных данных (числа с плавающей точкой в десятичной системе счисления)

                Возвращаемое значение:
                (data[0] * data[3] / 2) (float) : число с плавающей точкой в десятичной системе счисления

                    Пример вызова функции:
                        area([6, 8, 10, 4]) = 24.0
    '''
    def is_digit(a):
        length = len(str(a))
        for i in range(0, length):
            if (not (a[i].isdigit())) and (a[i] != "e") and (a[i] != ".") and (a[i] != "+") and (a[i] != "-"):
                return False
        return True

    if len(data) != 4:
        return 'Перечитайте условие и введите необходимое количество входных данных.'
    else:
        a, b, c, h = data

    # обработка и выдача результатов
    if is_digit(str(a)) and is_digit(str(b)) and is_digit(str(c)) and is_digit(str(h)):
        a = float(a)
        b = float(b)
        c = float(c)
        h = float(h)
        if (a < 0) or (b < 0) or (c < 0) or (h < 0):
            return('Значение элемента геометрической фигуры не может быть отрицательным, введите корректные данные.')
        else:
            if (a == 0) or (b == 0) or (c == 0) or (h == 0):
                return 0
            elif a == 1.7976931348623157e+308 or h == 1.7976931348623157e+308 or b == 1.7976931348623157e+308 or c == 1.7976931348623157e+308:
                return 'Ошибка: Переполнение в результате выполнения арифметической операции.'
            if (not (a + b > c)) or (not (b + c > a)) or (not (a + c > b)):
                return 'Треугольника с введенными сторонами не существует'
            elif (1 / 2 * a * h) != ((((a + b + c) / 2) * (b + c) * (a + c) * (a + b)) ** 0.5):
                return(
                    'Значение высоты, опущенной на одну из сторону треугольника, введеную первой, определено неверно. Попробуйте еще раз и введите корректные данные')
            else:
                return 0.5 * a * h
    else:
        return 'Входные данные являются строковыми значениями, а не численными. Попробуйте еще раз и введите корректные данные.'


def perimeter(data):
    '''
            Возвращает сумму трех чисел с плавающей точкой в десятичной системе счисления и десятичной константы.

                Параметры:
                    data (str) : массив входных данных (числа с плавающей точкой в десятичной системе счисления)

                    Возвращаемое значение:
                    (data[0] + data[1] + data[2]) (float) : число с плавающей точкой в десятичной системе счисления

                        Пример вызова функции:
                            perimeter([60, 80, 100, 40]) = 240.0
    '''
    def is_digit(a):
        length = len(str(a))
        for i in range(0, length):
            if (not (a[i].isdigit())) and (a[i] != "e") and (a[i] != ".") and (a[i] != "+") and (a[i] != "-"):
                return False
        return True

    if len(data) != 4:
        return 'Перечитайте условие и введите необходимое количество входных данных.'
    else:
        a, b, c, h = data

    # обработка и выдача результатов
    if is_digit(str(a)) and is_digit(str(b)) and is_digit(str(c)) and is_digit(str(h)):
        a = float(a)
        b = float(b)
        c = float(c)
        h = float(h)
        if (a < 0) or (b < 0) or (c < 0) or (h < 0):
            return('Значение элемента геометрической фигуры не может быть отрицательным, введите корректные данные.')
        else:
            if (a == 0) or (b == 0) or (c == 0) or (h == 0):
                return 0
            elif a == 1.7976931348623157e+308 or h == 1.7976931348623157e+308 or b == 1.7976931348623157e+308 or c == 1.7976931348623157e+308:
                return 'Ошибка: Переполнение в результате выполнения арифметической операции.'
            elif (not (a + b > c)) or (not (b + c > a)) or (not (a + c > b)):
                return 'Треугольника с введенными сторонами не существует'
            elif (1 / 2 * a * h) != ((((a + b + c) / 2) * (b + c) * (a + c) * (a + b)) ** 0.5):
                return 'Значение высоты, опущенной на одну из сторону треугольника, введеную первой, определено неверно. Попробуйте еще раз и введите корректные данные'
            else:
                return a + b + c
    else:
        return 'Входные данные являются строковыми значениями, а не численными. Попробуйте еще раз и введите корректные данные.'


class CircleTestCase(unittest.TestCase):
    def test_zero_mul(self):
        res = area([0, 9, 2, 7])
        self.assertEqual(res, 0)

    def test_area_mul(self):
        res = area([51, 32, 78, 381.84578733521687])
        self.assertEqual(res, 9737.06757704803)

    def test_perimeter_mul(self):
        res = perimeter([52, 45, 82, 467.4964275406964])
        self.assertEqual(res, 179)

    def test_perimeter_negative(self):
        res = perimeter([-8329, 7929, 23920, 1289382])
        self.assertEqual(res, 'Значение элемента геометрической фигуры не может быть отрицательным, введите корректные данные.')

    def test_area_negative(self):
        res = area([-18.301, 0, 1, 1])
        self.assertEqual(res, 'Значение элемента геометрической фигуры не может быть отрицательным, введите корректные данные.')

    def test_perimeter_inf(self):
        res = perimeter([1.7976931348623157e+308, 1, 4, 8])
        self.assertEqual(res, 'Ошибка: Переполнение в результате выполнения арифметической операции.')

    def test_area_inf(self):
        res = area([1.7976931348623157e+308, 193, 821923, 1])
        self.assertEqual(res, 'Ошибка: Переполнение в результате выполнения арифметической операции.')

    def test_perimeter_str(self):
        res = perimeter(['bibaboba', 'www', 'ac/dc', 'apdjbqw'])
        self.assertEqual(res, 'Входные данные являются строковыми значениями, а не численными. Попробуйте еще раз и введите корректные данные.')

    def test_area_str(self):
        res = area(['bambam', 373021, "2102", -7])
        self.assertEqual(res, 'Входные данные являются строковыми значениями, а не численными. Попробуйте еще раз и введите корректные данные.')

    def test_perimeter_value(self):
        res = perimeter([53, 19, 49, 207.4209427473755, 53, 60, 37, 324.58698460221365])
        self.assertEqual(res, 'Перечитайте условие и введите необходимое количество входных данных.')

    def test_area_value(self):
        res = area([3, 79, 94])
        self.assertEqual(res, 'Перечитайте условие и введите необходимое количество входных данных.')